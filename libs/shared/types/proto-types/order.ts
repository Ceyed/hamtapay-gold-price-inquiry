// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.12.4
// source: libs/proto/order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty, ErrorInterface } from "./common";

export const protobufPackage = "order";

export interface StockInProductInterface {
  productId: string;
  amount: number;
}

export interface StockInProductResponse {
  data: ProductProtoType | undefined;
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface GetStockHistoryResponse {
  data: StockHistoryProtoType[];
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface CreateOrderInterface {
  customerId: string;
  productId: string;
  amount: number;
}

export interface CreateOrderResponse {
  data: OrderProtoType | undefined;
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface GetOrderListResponse {
  data: OrderProtoType[];
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface GetProductListResponse {
  data: ProductProtoType[];
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface GetProductListByAdminResponse {
  data: ProductProtoType[];
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface OrderProtoType {
  id: string;
  createdAt: string;
  updatedAt: string;
  customerId: string;
  goldGrams: string;
  amount: number;
  gramPrice: number;
  totalPrice: number;
}

export interface StockHistoryProtoType {
  id: string;
  createdAt: string;
  updatedAt: string;
  type: string;
  amount: number;
  productId: string;
  product: ProductProtoType | undefined;
}

export interface ProductProtoType {
  id: string;
  createdAt: string;
  updatedAt: string;
  goldGrams: string;
  currentStock: number;
  totalStock: number;
  orders: OrderProtoType[];
  stockHistories: StockHistoryProtoType[];
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderInterface): Observable<CreateOrderResponse>;

  getOrderList(request: Empty): Observable<GetOrderListResponse>;

  getProductList(request: Empty): Observable<GetProductListResponse>;

  getProductListByAdmin(request: Empty): Observable<GetProductListByAdminResponse>;

  stockInProduct(request: StockInProductInterface): Observable<StockInProductResponse>;

  getStockHistory(request: Empty): Observable<GetStockHistoryResponse>;
}

export interface OrderServiceController {
  createOrder(
    request: CreateOrderInterface,
  ): Promise<CreateOrderResponse> | Observable<CreateOrderResponse> | CreateOrderResponse;

  getOrderList(request: Empty): Promise<GetOrderListResponse> | Observable<GetOrderListResponse> | GetOrderListResponse;

  getProductList(
    request: Empty,
  ): Promise<GetProductListResponse> | Observable<GetProductListResponse> | GetProductListResponse;

  getProductListByAdmin(
    request: Empty,
  ): Promise<GetProductListByAdminResponse> | Observable<GetProductListByAdminResponse> | GetProductListByAdminResponse;

  stockInProduct(
    request: StockInProductInterface,
  ): Promise<StockInProductResponse> | Observable<StockInProductResponse> | StockInProductResponse;

  getStockHistory(
    request: Empty,
  ): Promise<GetStockHistoryResponse> | Observable<GetStockHistoryResponse> | GetStockHistoryResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createOrder",
      "getOrderList",
      "getProductList",
      "getProductListByAdmin",
      "stockInProduct",
      "getStockHistory",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
