// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.12.4
// source: libs/proto/notification.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./common";

export const protobufPackage = "notification";

export interface OrderRegisteredInterface {
  orderId: string;
  newStock: number;
  totalStock: number;
}

export interface SendEmailConfirmationCodeInterface {
  customerId: string;
  confirmationCode: string;
}

export const NOTIFICATION_PACKAGE_NAME = "notification";

export interface NotificationServiceClient {
  orderRegistered(request: OrderRegisteredInterface): Observable<Empty>;

  sendEmailConfirmationCode(request: SendEmailConfirmationCodeInterface): Observable<Empty>;
}

export interface NotificationServiceController {
  orderRegistered(request: OrderRegisteredInterface): Promise<Empty> | Observable<Empty> | Empty;

  sendEmailConfirmationCode(request: SendEmailConfirmationCodeInterface): Promise<Empty> | Observable<Empty> | Empty;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["orderRegistered", "sendEmailConfirmationCode"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
