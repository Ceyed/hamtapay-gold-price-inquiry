// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: libs/proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface SignupInterface {
  username: string;
  password: string;
  email: string;
}

export interface SigninInterface {
  username: string;
  password: string;
}

export interface RefreshTokenInterface {
  refreshToken: string;
}

export interface AssignRoleInterface {
  userId: string;
  role: string;
}

export interface SignupResponse {
  data: string;
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface SigninResponse {
  data: TokensInterface | undefined;
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface TokensInterface {
  accessToken: string;
  refreshToken: string;
}

export interface AssignRoleResponse {
  data: string;
  success: boolean;
  error: ErrorInterface | undefined;
}

export interface UserModel {
  id: string;
  createdAt: string;
  updatedAt: string;
  username: string;
  password: string;
  email: string;
  role: string;
}

export interface ErrorInterface {
  statusCode: number;
  message: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UsersServiceClient {
  signup(request: SignupInterface): Observable<SignupResponse>;

  signin(request: SigninInterface): Observable<SigninResponse>;

  refreshToken(request: RefreshTokenInterface): Observable<SigninResponse>;

  assignRole(request: AssignRoleInterface): Observable<AssignRoleResponse>;
}

export interface UsersServiceController {
  signup(request: SignupInterface): Promise<SignupResponse> | Observable<SignupResponse> | SignupResponse;

  signin(request: SigninInterface): Promise<SigninResponse> | Observable<SigninResponse> | SigninResponse;

  refreshToken(request: RefreshTokenInterface): Promise<SigninResponse> | Observable<SigninResponse> | SigninResponse;

  assignRole(
    request: AssignRoleInterface,
  ): Promise<AssignRoleResponse> | Observable<AssignRoleResponse> | AssignRoleResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signup", "signin", "refreshToken", "assignRole"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
